generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions"), vector]
}

model User {
  id           String        @id
  configId     String?       @map("config_id") @db.Uuid
  createdAt    DateTime?     @default(now()) @map("created_at") @db.Timestamptz(6)
  email        String?       @unique
  systemPrompt String?       @map("system_prompt")
  firstName    String?       @map("first_name")
  lastName     String?       @map("last_name")
  memoryChains MemoryChain[]
  sessions     Session[]

  @@map("users")
}

model Session {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String    @map("user_id")
  timestamp DateTime  @default(now()) @db.Timestamptz(6)
  messages  Message[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, timestamp])
  @@map("sessions")
}

model Message {
  id        String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionId String         @map("session_id") @db.Uuid
  role      String         @db.VarChar(10)
  content   String
  timestamp DateTime       @default(now()) @db.Timestamptz(6)
  metadata  Json?          @default("{}")
  vector    MessageVector?
  session   Session        @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([sessionId, timestamp])
  @@map("messages")
}

model MessageVector {
  id         String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  messageId  String                @unique @map("message_id") @db.Uuid
  embedding  Unsupported("vector")
  created_at DateTime              @default(now()) @db.Timestamptz(6)
  message    Message               @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([embedding])
  @@map("message_vectors")
}

model MemoryChain {
  id          String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String             @map("user_id")
  type        String             @db.VarChar(20)
  pattern     Json
  confidence  Float              @default(0.0)
  verified    Boolean            @default(false)
  occurrences Json[]
  metadata    Json?              @default("{}")
  createdAt   DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime           @updatedAt @map("updated_at") @db.Timestamptz(6)
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  detections  PatternDetection[]

  @@index([userId, type])
  @@index([userId, createdAt])
  @@map("memory_chains")
}

model PatternDetection {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  chainId    String      @map("chain_id") @db.Uuid
  messageIds String[]    @db.Uuid
  score      Float       @default(0.0)
  context    Json
  timestamp  DateTime    @default(now()) @db.Timestamptz(6)
  chain      MemoryChain @relation(fields: [chainId], references: [id], onDelete: Cascade)

  @@index([chainId, timestamp])
  @@map("pattern_detections")
}
