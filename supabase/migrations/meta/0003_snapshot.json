{
  "id": "901b8f35-e197-4f0d-9141-e6db269010e9",
  "prevId": "6638555c-6ab7-4ed7-ac74-efe705ca6efd",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.active_resources": {
      "name": "active_resources",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "config_id": {
          "name": "config_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "config_version": {
          "name": "config_version",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "prompt_id": {
          "name": "prompt_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "prompt_version": {
          "name": "prompt_version",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "voice_id": {
          "name": "voice_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "voice_version": {
          "name": "voice_version",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "active_resources_user_id_fkey": {
          "name": "active_resources_user_id_fkey",
          "tableFrom": "active_resources",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "active_resources_user_id_key": {
          "name": "active_resources_user_id_key",
          "nullsNotDistinct": false,
          "columns": [
            "user_id"
          ]
        }
      },
      "policies": {
        "Users can read their own active resources": {
          "name": "Users can read their own active resources",
          "as": "RESTRICTIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "auth.uid() = user_id",
          "withCheck": "auth.uid() = user_id"
        },
        "Users can insert their own active resources": {
          "name": "Users can insert their own active resources",
          "as": "RESTRICTIVE",
          "for": "INSERT",
          "to": [
            "public"
          ],
          "using": "auth.uid() = user_id",
          "withCheck": "auth.uid() = user_id"
        },
        "Users can update their own active resources": {
          "name": "Users can update their own active resources",
          "as": "RESTRICTIVE",
          "for": "UPDATE",
          "to": [
            "public"
          ],
          "using": "auth.uid() = user_id",
          "withCheck": "auth.uid() = user_id"
        },
        "Users can delete their own active resources": {
          "name": "Users can delete their own active resources",
          "as": "RESTRICTIVE",
          "for": "DELETE",
          "to": [
            "public"
          ],
          "using": "auth.uid() = user_id",
          "withCheck": "auth.uid() = user_id"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.active_tools": {
      "name": "active_tools",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "active_resource_id": {
          "name": "active_resource_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "tool_id": {
          "name": "tool_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "tool_version": {
          "name": "tool_version",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "active_tools_active_resource_id_fkey": {
          "name": "active_tools_active_resource_id_fkey",
          "tableFrom": "active_tools",
          "tableTo": "active_resources",
          "columnsFrom": [
            "active_resource_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Users can read their active tools": {
          "name": "Users can read their active tools",
          "as": "RESTRICTIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "(EXISTS ( SELECT 1\n   FROM active_resources\n  WHERE ((active_resources.id = active_tools.active_resource_id) AND (active_resources.user_id = auth.uid()))))",
          "withCheck": "(EXISTS ( SELECT 1\n   FROM active_resources\n  WHERE ((active_resources.id = active_tools.active_resource_id) AND (active_resources.user_id = auth.uid()))))"
        },
        "Users can manage their active tools": {
          "name": "Users can manage their active tools",
          "as": "RESTRICTIVE",
          "for": "ALL",
          "to": [
            "public"
          ],
          "using": "EXISTS (\n\t\tSELECT 1 FROM active_resources\n\t\tWHERE active_resources.id = active_tools.active_resource_id\n\t\tAND active_resources.user_id = auth.uid()\n\t)",
          "withCheck": "EXISTS (\n\t\tSELECT 1 FROM active_resources\n\t\tWHERE active_resources.id = active_tools.active_resource_id\n\t\tAND active_resources.user_id = auth.uid()\n\t)"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.messages": {
      "name": "messages",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "session_id": {
          "name": "session_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "content": {
          "name": "content",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "role": {
          "name": "role",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "timestamp": {
          "name": "timestamp",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        },
        "metadata": {
          "name": "metadata",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false,
          "default": "'{}'::jsonb"
        },
        "embedding": {
          "name": "embedding",
          "type": "vector(1024)",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "messages_embedding_idx": {
          "name": "messages_embedding_idx",
          "columns": [
            {
              "expression": "embedding",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "vector_cosine_ops"
            }
          ],
          "isUnique": false,
          "where": "(embedding IS NOT NULL)",
          "concurrently": false,
          "method": "ivfflat",
          "with": {}
        }
      },
      "foreignKeys": {
        "messages_user_id_fkey": {
          "name": "messages_user_id_fkey",
          "tableFrom": "messages",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Users can manage their own messages": {
          "name": "Users can manage their own messages",
          "as": "RESTRICTIVE",
          "for": "ALL",
          "to": [
            "public"
          ],
          "using": "auth.uid() = user_id",
          "withCheck": "auth.uid() = user_id"
        }
      },
      "checkConstraints": {
        "messages_role_check": {
          "name": "messages_role_check",
          "value": "role = ANY (ARRAY['user'::text, 'assistant'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.resource_cache": {
      "name": "resource_cache",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        },
        "resource_type": {
          "name": "resource_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "resource_id": {
          "name": "resource_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "data": {
          "name": "data",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.users": {
      "name": "users",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "text",
          "primaryKey": true,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Users can manage their own data": {
          "name": "Users can manage their own data",
          "as": "RESTRICTIVE",
          "for": "ALL",
          "to": [
            "public"
          ],
          "using": "auth.uid() = id",
          "withCheck": "auth.uid() = id"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    }
  },
  "enums": {},
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {},
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}